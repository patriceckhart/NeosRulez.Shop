prototype(NeosRulez.Shop:Component.Product.Afx) < prototype(Neos.Fusion:Component) {

    main = Neos.Neos:ContentCollection {
        nodePath = 'main'
    }

    parentNode = ${node.parent.nodeType.name == 'NeosRulez.Shop:Document.Product' ? node.parent : false}
    @context.parentNode = ${this.parentNode}
    contentNodes = ${q(node).children('main').find('[instanceof Neos.Neos:Content]').filter('[_hidden=false]').get()}
    inBackend = ${site.context.inBackend}

    parent = Neos.Neos:ContentCollection {
        nodePath = ${q(parentNode).children('main').property('_path')}
        collection = ${q(parentNode).children('main').children()}

        prototype(Neos.Neos:ContentElementWrapping) {
            @if.render = false
        }
        prototype(Neos.Neos:Editable) {
            renderer.editable.condition = false
        }
    }
    parent.@if.condition = ${this.parentNode && !this.contentNodes ? true : false}

    isCollection = ${node.nodeType.name == 'NeosRulez.Shop:Document.ProductCollection' ? true : false}

    renderer = afx`
        <NeosRulez.Shop:Component.CountrySelection />
        <div class="product_detail">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <NeosRulez.Shop:Component.Product.Afx.Images />
                    </div>
                    <div class="col-md-6">
                        <NeosRulez.Shop:Component.Product.Afx.Content />
                        <Neos.Fusion:Fragment @if={!props.isCollection}>
                            <NeosRulez.Shop:Component.Product.Afx.Add />
                        </Neos.Fusion:Fragment>
                        <NeosRulez.Shop:Component.CartAlert />
                    </div>
                </div>
            </div>
        </div>
        <Neos.Fusion:Fragment @if.render={props.inBackend || (props.contentNodes && Array.length(props.contentNodes) > 0)}>
            {props.main}
        </Neos.Fusion:Fragment>
        <NeosRulez.Shop:Component.Product.Afx.ParentNodeCollection @if.render={props.parentNode && !props.contentNodes} parent={props.parent} />
    `
    renderer.@process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
        node = ${documentNode}
    }
}

prototype(NeosRulez.Shop:Component.Product.Afx.ParentNodeCollection) < prototype(Neos.Fusion:Component) {

    parent = false

    renderer = afx`
        <Neos.Fusion:Fragment @if.render={props.parent}>
            {props.parent}
        </Neos.Fusion:Fragment>
    `
    @cache {
        mode = 'cached'
        entryIdentifier {
            node = ${node}
        }
        context {
            1 = 'site'
            2 = 'node'
            3 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.descendantOfTag(q(node).closest('main').get(0))}
            3 = ${Neos.Caching.descendantOfTag(q(node).parent().get(0))}
        }
    }
}

prototype(NeosRulez.Shop:Component.Product.Afx.Images) < prototype(Neos.Fusion:Component) {

    galleryId = ${node.identifier}

    imageWidth = 550
    imageHeight = 450
    thumbWidth = 150
    thumbHeight = 150

    images = ${q(node).property('images')}

    parentNode = ${node.parent.nodeType.name == 'NeosRulez.Shop:Document.Product' ? node.parent : false}
    @context.node = ${this.images && Array.length(this.images) > 0 ? node : this.parentNode}

    title = ${q(node).property('title')}

    dontCropImage = ${q(node).property('dontCropImage')}

    renderer = afx`
        <div class="product_image">
            <div @if.render={props.images} class="image lightbox">
                <NeosRulez.Bootstrap:Component.ImageTag.Lightbox image={props.images[0]} galleryId={'lightbox__' + props.galleryId} width={props.imageWidth} maximumWidth={props.imageWidth} height={props.dontCropImage ? false : props.imageHeight} allowCropping={props.dontCropImage ? false : true} allowUpScaling={true} alternativeText={q(node).property('title')} title={props.title} async={true} class="img-fluid" />
            </div>
        </div>
        <div @if.render={props.images} class="product_images">
            <div class="images">
                <div class="row">
                    <Neos.Fusion:Loop items={props.images} itemName="image" iterationName="imagesIterator">
                        <div @if.render={imagesIterator.index != 0 ? true : false} class="col-md-3 col-6">
                            <div class="image lightbox">
                                <NeosRulez.Bootstrap:Component.ImageTag.Lightbox image={image} galleryId={'lightbox__' + props.galleryId} width={props.thumbWidth} height={props.thumbHeight} allowCropping={true} allowUpScaling={true} alternativeText={q(node).property('title')} title={props.title} async={true} class="img-fluid" />
                            </div>
                        </div>
                    </Neos.Fusion:Loop>
                </div>
            </div>
        </div>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Content) < prototype(Neos.Fusion:Component) {

    parentNode = ${node.parent.nodeType.name == 'NeosRulez.Shop:Document.Product' ? node.parent : false}
    inBackend = ${site.context.inBackend}
    description = ${q(node).property('description')}
    parentDescription = ${this.parentNode ? q(this.parentNode).property('description') : false}

    renderer = afx`
        <div class="product_content">
            <div class="row">
                <div class="col-md-8 col-6">
                    <h1>
                        <Neos.Neos:Editable property="title" />
                    </h1>
                    <small class="article_number">
                        {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:article_number')} <Neos.Neos:Editable property="article_number" block={false} />
                    </small>
                </div>
                <div class="col-md-4 col-6">
                    <NeosRulez.Shop:Component.Product.Afx.Content.Price />
                </div>
            </div>
            <div class="my-3 description">
                <Neos.Fusion:Fragment @if.render={!props.description && props.parentDescription}>
                    {props.parentDescription}
                </Neos.Fusion:Fragment>
                <Neos.Fusion:Fragment @if.render={props.inBackend || props.description}>
                    <Neos.Neos:Editable property="description" />
                </Neos.Fusion:Fragment>
            </div>
        </div>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Content.Price) < prototype(Neos.Fusion:Component) {

    @context.isCollection = ${node.nodeType.name == 'NeosRulez.Shop:Document.ProductCollection' ? true : false}

    price = ${q(node).property('price')}
    oldPrice = ${q(node).property('old_price')}
    tax = ${q(node).property('tax')}
    taxClass = ${q(node).property('itemCollection') && Configuration.setting('NeosRulez.Shop.oneStopShop') ? true : (q(node).property('taxClass') ? q(node).property('taxClass') : false)}
    @context.taxClass= ${this.taxClass}

    getTaxClass = NeosRulez.Shop:Class.TaxClass {
        taxClass = ${taxClass}
        isCollection = ${isCollection}
    }
//    getTaxClass.@if.condition = ${taxClass ? true : false}
    getTaxClass.@if.condition = ${this.taxClass || (q(node).property('itemCollection') && Configuration.setting('NeosRulez.Shop.oneStopShop')) ? true : false}

    selectedCountry = NeosRulez.CountryDataSource:Class.Countries {
        include = NeosRulez.Shop:Class.SelectedCountry
    }

    floatPrice = ${Configuration.setting('NeosRulez.Shop.oneStopShop') ? (String.toFloat(String.replace(this.price, ',', '.')) * ((String.toFloat(this.getTaxClass) / 100) + 1)) : String.toFloat(String.replace(this.price, ',', '.'))}

    renderer = afx`
        <div class="d-block price">
            <NeosRulez.Shop:Class.Currency float={props.floatPrice} currencySign="€" />
        </div>
        <small @if.render={props.taxClass && props.getTaxClass} class="d-block tax">
            {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Cart:incl')} {props.getTaxClass} % {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Cart:tax_short')}
            <div class="d-inline-block text-muted mt-2">
                <strong>{props.selectedCountry[0].name.common}</strong> (<Neos.Fusion:Link.Action class="text-muted" href.action="selectcountry" href.package="NeosRulez.Shop" href.controller="Cart" href.arguments={{country: false}} >{I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:content.changeCountry')}</Neos.Fusion:Link.Action>)
            </div>
        </small>
        <small @if.render={props.tax} class="d-block tax">
            {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Cart:incl')} {props.tax} % {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Cart:tax_short')}
        </small>
        <div @if.render={props.oldPrice} class="d-block mt-2 old_price">
            {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:instead_of')} <NeosRulez.Shop:Class.Currency float={String.toFloat(String.replace(props.oldPrice, ',', '.'))} currencySign="€" />
        </div>
    `
    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.country}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
        }
    }
}

prototype(NeosRulez.Shop:Component.Product.Afx.Add) < prototype(Neos.Fusion:Component) {

    content = false

    @context.isCollection = ${node.nodeType.name == 'NeosRulez.Shop:Document.ProductCollection' ? true : false}

    productCollection = NeosRulez.Shop:Class.ProductCollection {
        items = ${q(node).property('itemCollection')}
    }

    nodeUri = Neos.Neos:NodeUri {
        node = ${documentNode}
        absolute = true
    }

//    stock = ${q(node).property('stock')}
//    stock = ${q(node).property('stock') ? q(node).property('stock') : (isCollection ? this.productCollection.stock : false)}

    getTaxClass = NeosRulez.Shop:Class.TaxClass {
        taxClass = ${q(node).property('taxClass')}
        isCollection = ${isCollection}
    }
    getTaxClass.@if.condition = ${q(node).property('taxClass') || (q(node).property('itemCollection') && Configuration.setting('NeosRulez.Shop.oneStopShop')) ? true : false}

    tax = ${isCollection ? (q(node).property('tax') ? q(node).property('tax') : this.productCollection.tax) : q(node).property('tax')}
    price = ${isCollection ? (q(node).property('price') ? q(node).property('price') : this.productCollection.fullPrice) : q(node).property('price')}
    oldPrice = ${isCollection ? false : q(node).property('old_price')}

    customPrice = ${isCollection ? Configuration.setting('NeosRulez.Shop.oneStopShop') ? (String.toFloat(String.replace(this.price, ',', '.'))) : String.toFloat(String.replace(this.price, ',', '.')) : false}

    quantityInStock = NeosRulez.Shop:Class.Stock {
        product = ${documentNode}
        stockLevel = ${q(documentNode).property('stockManagement') ? q(documentNode).property('stockLevel') : false}
    }

    stock = ${q(documentNode).property('stockManagement') ? this.quantityInStock : q(node).property('stock')}

    disableCartForm = ${q(node).property('disableCartForm')}

    renderer = afx`
        <NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants @if={props.disableCartForm} />
        <Neos.Fusion.Form:Form @if.render={props.stock && !props.disableCartForm} attributes.id="product_form" form.target.action={isCollection ? 'addCustom' : 'add'} form.target.controller="Cart" form.target.package="NeosRulez.Shop" form.data.item={item} >
            {props.content}
            <div class="row align-items-center add_to_cart">
                <NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants />
                <NeosRulez.Shop:Component.Product.Afx.Options />
                <NeosRulez.Shop:Component.Product.Afx.Options.FreeStyleText />
                <div class="col-md-4">
                    <NeosRulez.Shop:Component.Product.Afx.Quantity />
                </div>
                <div class="col-md-8">
                    <Neos.Fusion.Form:Button attributes.class="btn btn-primary btn-block w-100 add-to-cart" >
                        {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:add_to_cart')}
                    </Neos.Fusion.Form:Button>
                </div>
            </div>
            <Neos.Fusion.Form:Hidden field.name="item[nodeUri]" field.value={props.nodeUri} />
            <Neos.Fusion.Form:Hidden field.name="item[node]" field.value={node.identifier} />
            <Neos.Fusion.Form:Hidden field.name="item[nodeLanguage]" field.value={node.context.targetDimensions.language} />

            <Neos.Fusion.Form:Hidden @if.render={props.getTaxClass} field.name="item[taxClass]" field.value={props.getTaxClass} />

            <Neos.Fusion.Form:Hidden @if.render={isCollection} field.name="item[tax]" field.value={props.tax} />
            <Neos.Fusion.Form:Hidden @if.render={props.customPrice} field.name="item[title]" field.value={q(node).property('title')} />
            <Neos.Fusion.Form:Hidden @if.render={props.customPrice} field.name="item[price_gross]" field.value={props.customPrice} />
            <Neos.Fusion.Form:Hidden @if.render={props.customPrice} field.name="item[article_number]" field.value={q(node).property('article_number')} />
            <Neos.Fusion.Form:Hidden @if.render={props.customPrice} field.name="item[weight]" field.value={props.productCollection.weight} />

            <NeosRulez.Shop:Component.Product.Afx.Add.CustomFormFields />

        </Neos.Fusion.Form:Form>
        <div @if.render={!props.stock} id="stockAlert" class="alert alert-danger">
            {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:notInStock')}
        </div>
    `
    @cache {
        mode = 'dynamic'
        entryIdentifier {
            node = ${node}
        }
        entryDiscriminator = ${request.arguments.country}
        context {
            1 = 'node'
            2 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
        }
    }
}

prototype(NeosRulez.Shop:Component.Product.Afx.Add.CustomFormFields) < prototype(Neos.Fusion:Component) {

    renderer = afx`

    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Quantity) < prototype(Neos.Fusion:Component) {

    product_min_quantity = ${q(node).property('min_quantity')}
    product_max_quantity = ${q(node).property('max_quantity')}
    array_min_quantity = ${this.product_min_quantity ? String.toInteger(this.product_min_quantity) : 0}
    stockManagement = ${q(documentNode).property('stockManagement') ? q(documentNode).property('stockLevel') : false}

    quantityInStock = NeosRulez.Shop:Class.Stock {
        product = ${documentNode}
        stockLevel = ${q(documentNode).property('stockManagement') ? q(documentNode).property('stockLevel') : false}
    }

    stockLevel = ${String.toInteger(this.quantityInStock) < String.toInteger(this.stockManagement) ? String.toInteger(this.quantityInStock) : String.toInteger(this.stockManagement)}

    max_quantity = ${this.stockManagement ? Array.range(String.toInteger(this.product_max_quantity), this.stockLevel, 1) : (this.product_max_quantity ? Array.range(String.toInteger(this.array_min_quantity), String.toInteger(this.product_max_quantity), 1) : Array.range(this.array_min_quantity, String.toInteger(Configuration.setting('NeosRulez.Shop.Product.max_quantity')), 1))}

    renderer = afx`
        <Neos.Fusion.Form:Select field.name="item[quantity]" attributes.class="form-control form-select product-quantity">
            <Neos.Fusion:Loop items={props.max_quantity} itemName="quantity">
                <Neos.Fusion.Form:Select.Option @if.render={quantity != 0} option.value={quantity} >{quantity}</Neos.Fusion.Form:Select.Option>
            </Neos.Fusion:Loop>
        </Neos.Fusion.Form:Select>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Options) < prototype(Neos.Fusion:Component) {

    option_groups = ${q(documentNode).children('[instanceof NeosRulez.Shop:Document.Options]').sort('_index', 'ASC').get()}

    renderer = afx`
        <Neos.Fusion:Loop @if.render={props.option_groups} items={props.option_groups} itemName="option_group">
            <div class="mb-3">
                <label for={'option__' + option_group.identifier} >{q(option_group).property('title')}</label>
                <Neos.Fusion.Form:Select attributes.id={'option__' + option_group.identifier} field.name="item[options][]" attributes.class="form-control form-select">
                    <NeosRulez.Shop:Component.Product.Afx.Options.Items optionGroup={option_group} />
                </Neos.Fusion.Form:Select>
            </div>
        </Neos.Fusion:Loop>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Options.Items) < prototype(Neos.Fusion:Component) {

    options = ${q(this.optionGroup).children('[instanceof NeosRulez.Shop:Document.Option]').sort('_index', 'ASC').get()}

    renderer = afx`
        <Neos.Fusion:Loop @if.render={props.options} items={props.options} itemName="optionItem">
            <Neos.Fusion.Form:Select.Option option.value={optionItem.identifier} >
                {q(optionItem).property('title')}
                <span @if.render={q(optionItem).property('price')} >
                    &nbsp;(+ <NeosRulez.Shop:Class.Currency float={q(optionItem).property('price')} currencySign="€" />)
                </span>
            </Neos.Fusion.Form:Select.Option>
        </Neos.Fusion:Loop>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Options.FreeStyleText) < prototype(Neos.Fusion:Component) {

    freeStyleOptions = ${q(documentNode).children('[instanceof NeosRulez.Shop:Document.FreeStyleTextOption]').sort('_index', 'ASC').get()}

    renderer = afx`
        <Neos.Fusion:Loop @if.render={props.freeStyleOptions} items={props.freeStyleOptions} itemName="freeStyleOption">
            <div class="mb-3">
                <label for={'option__' + freeStyleOption.identifier} >{q(freeStyleOption).property('title')}</label>
                <Neos.Fusion.Form:Input attributes.id={'option__' + freeStyleOption.identifier} field.name="item[options2][]" attributes.class="form-control" attributes.placeholder={I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:freestyleTextLabel')} attributes.required={q(freeStyleOption).property('isRequired') ? 'required' : false} />
            </div>
        </Neos.Fusion:Loop>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants) < prototype(Neos.Fusion:Component) {

    parent_product = ${q(documentNode).parent('[instanceof NeosRulez.Shop:Document.Product]').get()}
    sub_products = ${this.parent_product ? q(this.parent_product).children('[instanceof NeosRulez.Shop:Document.Product]').sort('_index', 'ASC').get() : q(documentNode).children('[instanceof NeosRulez.Shop:Document.Product]').sort('_index', 'ASC').get()}

    renderer = afx`
        <div @if.render={props.sub_products} class="mb-3">
            <label for="variants">{I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:variants')}</label>
            <div class="d-block btn-group">
                <button type="button" class="form-control form-select" data-bs-toggle="dropdown" aria-expanded="false" style="text-align:left">
                    <NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants.Variant product={documentNode} self={true} />
                </button>
                <ul class="dropdown-menu">
                    <li @if.render={props.parent_product} >
                        <Neos.Neos:NodeLink node={props.parent_product[0]} attributes.class="dropdown-item">
                            <NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants.Variant product={props.parent_product[0]} />
                        </Neos.Neos:NodeLink>
                    </li>
                    <Neos.Fusion:Loop @if.render={props.sub_products} items={props.sub_products} itemName="sub_product">
                        <li>
                            <Neos.Neos:NodeLink node={sub_product} attributes.class="dropdown-item">
                                <NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants.Variant product={sub_product} />
                            </Neos.Neos:NodeLink>
                        </li>
                    </Neos.Fusion:Loop>
                </ul>
            </div>
        </div>
    `
}

prototype(NeosRulez.Shop:Component.Product.Afx.Options.ProductVariants.Variant) < prototype(Neos.Fusion:Component) {
    @context.isCollection = ${node.nodeType.name == 'NeosRulez.Shop:Document.ProductCollection' ? true : false}
    getTaxClass = NeosRulez.Shop:Class.TaxClass {
        taxClass = ${q(node).property('taxClass')}
        isCollection = ${isCollection}
    }
//    getTaxClass.@if.condition = ${node.properties.taxClass ? true : false}
    getTaxClass.@if.condition = ${q(node).property('taxClass') || (q(node).property('itemCollection') && Configuration.setting('NeosRulez.Shop.oneStopShop')) ? true : false}

    selectedCountry = NeosRulez.CountryDataSource:Class.Countries {
        include = NeosRulez.Shop:Class.SelectedCountry
    }

    price = ${Configuration.setting('NeosRulez.Shop.oneStopShop') ? (String.toFloat(String.replace(q(node).property('price'), ',', '.')) * ((String.toFloat(this.getTaxClass) / 100) + 1)) : String.toFloat(String.replace(q(node).property('price'), ',', '.'))}

    parentNode = ${this.product.parent.nodeType.name == 'NeosRulez.Shop:Document.Product' ? this.product.parent : false}
    images = ${q(this.product).property('images') && Array.length(q(this.product).property('images')) > 0 ? q(this.product).property('images') : q(this.parentNode).property('images')}

    renderer = afx`
        <div @if.render={props.product.identifier != documentNode.identifier || props.self ? true : false} class="row align-items-center">
            <div class="col-2">
                <NeosRulez.Bootstrap:Component.ImageTag @if.render={props.images && Array.length(props.images) > 0} image={props.images[0]} width="60" height="60" allowCropping={true} allowUpScaling={true} alternativeText={q(props.product).property('title')} title={q(props.product).property('title')} />
            </div>
            <div class="col-10">
                {q(props.product).property('title')}
                <small class="d-block mt-2">
                    {I18n.translate('NeosRulez.Shop:NodeTypes.Component.Product:article_number')} {q(props.product).property('article_number')}
                    <strong class="ml-2">
                        <NeosRulez.Shop:Class.Currency float={props.price} currencySign="€" />
                    </strong>
                </small>
            </div>
        </div>
    `
}

//prototype(NeosRulez.Shop:Document.Product) < prototype(Acme.Site:Document.AbstractPage) {
//    body.content = NeosRulez.Shop:Component.Product.Afx
//}
