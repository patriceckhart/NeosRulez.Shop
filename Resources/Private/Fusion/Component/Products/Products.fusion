prototype(NeosRulez.Shop:Content.Products) < prototype(Neos.Neos:ContentComponent) {
    selection = Neos.Neos:MenuItems {
        itemCollection = ${q(node).property('selection')}
    }
    selection.@if.condition = ${q(node).property('selection') && Array.length(q(node).property('selection')) > 0 ? true : false}
    startingPoint = Neos.Neos:MenuItems {
        startingPoint = ${q(node).property('startingPoint')}
        filter = 'NeosRulez.Shop:Document.Product'
    }
    startingPoint.@if.condition = ${q(node).property('startingPoint') ? true : false}
    products = ${this.startingPoint ? this.startingPoint : this.selection}

    @context.startingPointNode = ${q(node).property('startingPoint')}
    @context.selectionNodes = ${q(node).property('selection')}

    renderer = afx`
        <NeosRulez.Shop:Component.AbstractContent>
            <div @if.render={props.products && Array.length(props.products) > 0} class="products filtered">
                <div class="row">
                    <Neos.Fusion:Loop items={props.products} item="item">
                        <NeosRulez.Shop:Content.Products.Item />
                    </Neos.Fusion:Loop>
                </div>
            </div>
        </NeosRulez.Shop:Component.AbstractContent>
    `
    @cache {
        mode = 'cached'
        entryIdentifier {
            node = ${node}
        }
        context {
            1 = 'site'
            2 = 'node'
            3 = 'documentNode'
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
            2 = ${Neos.Caching.nodeTag(selectionNodes)}
            3 = ${Neos.Caching.descendantOfTag(startingPointNode)}
        }
    }
}

prototype(NeosRulez.Shop:Content.Products.Item) < prototype(Neos.Fusion:Component) {

    cropImage = ${q(node).property('cropImage')}
    useImageSourceSet = ${Configuration.setting('NeosRulez.Shop.useImageSourceSet')}

    categoryString = Neos.Fusion:Loop {
        items = ${q(item.node).property('categories')}
        itemName = 'category'
        itemRenderer = ${' category-' + category.identifier}
        @if.condition = ${q(item.node).property('categories') && Array.length(q(item.node).property('categories')) > 0}
    }

    renderer = afx`
        <div class={'col-md-4 mix' + (props.categoryString)}>
            <Neos.Neos:NodeLink node={item.node} attributes.class="d-block product-item-link">
                <div class="row">
                    <div class="col-12">
                        <Neos.Fusion:Fragment @if.render={q(item.node).property('images') && Array.length(q(item.node).property('images')) > 0}>
                            <Neos.Neos:ImageTag @if.render={!props.useImageSourceSet} asset={q(item.node).property('images')[0]} allowUpScaling={true} allowCropping={props.cropImage ? true : false} width="400" height={props.cropImage ? 280 : false} attributes.class="img-fluid product-item-image" async={true} />
                            <NeosRulez.Bootstrap:Component.ImageTag @if.render={props.useImageSourceSet} image={q(item.node).property('images')[0]} width="400" height={props.cropImage ? 280 : false} allowCropping={props.cropImage ? true : false} allowUpScaling={true} async={true} />
                        </Neos.Fusion:Fragment>
                        <div class="d-block mt-2 product-item-title">
                            {q(item.node).property('title')}
                        </div>
                    </div>
                </div>
                <div class="row align-items-end">
                    <div class="col-5">
                        <small class="product-item-articlenumber">Art.Nr.: {q(item.node).property('article_number')}</small>
                    </div>
                    <div class="col-7 text-end product-item-price">
                        â‚¬ {q(item.node).property('price')}
                    </div>
                </div>
            </Neos.Neos:NodeLink>
        </div>
    `
}
